package com.eurail.test.app;

import com.eurail.test.app.utils.HttpExecutor;
import org.apache.http.HttpResponse;
import org.junit.BeforeClass;
import org.junit.Test;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Created  2019-07-17 17:52
 * Copyright (c) 2019 Eurail.com B.V.
 *
 * @author Radion, Rodion.Kyryliak@eurail.com
 */

public class OrderServiceTest {
//  Use OrderService to create, delete, read, activate and cancel orders
//  For example to create order:
//  Order order = new OrderService().createOrder("My First order");
    private HttpExecutor executorMock;

    @BeforeClass
    public void init() {
        executorMock = mock(HttpExecutor.class);
    }

    @Test
    public void testCreateOrder() {
        //  Create order
        //  Http code is 201
        //  Order title is "My First order"
        //  Order orderUuid is autogenerated (not null and not empty)
        //  Order state is "NEW"

        when(executorMock.execPost(anyString())).thenReturn();
    }

    @Test
    public void testCreateOrderFailed() {
        //  Create order (title not provided)
        //  Http code is 400
    }

    @Test
    public void testReadOrderFailed() {
        //  Create order
        //  Http code is 201
        //  Read Order by wrong orderUuid
        //  Http code is 400
    }

    @Test
    public void testDeleteNweOrder() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Delete order
        //  Http status is 204
        //  Read order
        //  Http status is 404
    }

    @Test
    public void testDeleteOrderByWrongOrderUuidFailed() {
        //  Create order
        //  Http code is 201
        //  Delete order by wrong orderUuid
        //  Http status is 404
        //  Read order
        //  Http status is 200
        //  Order state is NEW
    }

    @Test
    public void testActivateOrder() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Activate order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "ACTIVATED"
    }

    @Test
    public void testCancelOrder() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Activate order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "ACTIVATED"
        //  Cancel order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "CANCELLED"
    }


    @Test
    public void testActivateActiveOrderFailed() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Activate order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "ACTIVATED"
        //  Activate order
        //  Http code is 409
    }

    @Test
    public void testActivateCancelledOrderFailed() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Activate order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "ACTIVATED"
        //  Cancel order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "CANCELLED"
        //  Activate order
        //  Http code is 409
        //  Read order
        //  Http code is 200
        //  Order state is "CANCELLED"
    }

    @Test
    public void testCancelCancelledOrderFailed() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Activate order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "ACTIVATED"
        //  Cancel order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "CANCELLED"
        //  Cancel order
        //  Http code is 409
        //  Read order
        //  Http code is 200
        //  Order state is "CANCELLED"
    }

    @Test
    public void testCancelNewOrderFailed() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Cancel order
        //  Http code is 209
        //  Read order
        //  Http code is 200
        //  Order state is "NEW"
    }

    @Test
    public void testActivateOrderWithWrongOrderUuidFailed() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Activate order by wrong orderUuid
        //  Http code is 404
        //  Read order
        //  Http code is 200
        //  Order state is "NEW"
    }

    @Test
    public void testCancelOrderWithWrongOrderUuidFailed() {
        //  Create order
        //  Http code is 201
        //  Order state is "NEW"
        //  Activate order
        //  Http code is 204
        //  Read order
        //  Http code is 200
        //  Order state is "ACTIVATED"
        //  Cancel order by wrong orderUuid
        //  Http code is 404
        //  Read order
        //  Http code is 200
        //  Order state is "ACTIVATED"
    }

    @Test
    public void testDeleteActivatedOrder() {
    }

    @Test
    public void testDeleteCancelledOrder() {
    }

    @Test
    public void testWrongBaseUrl() {
        //  Create order by wrong url
    }


}
